{"version":3,"sources":["components/ring/logo.svg","components/node/node.js","components/ring/utils.js","algorithms/lcr.js","components/ring/ring.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","nextMessage","classes","this","props","node","isLeader","push","data","className","join","uid","React","Component","distributeNodes","radius","width","height","nodeWidth","numNodes","angle","step","Math","PI","coordinates","index","x","round","cos","y","sin","lcr","nodes","selectedLeader","len","length","results","uidValues","currentValues","cnt","resultValues","nextValues","idx","prev","max","maxuid","path","leader","Ring","state","defaultState","runAlgorithm","bind","addNode","removeNode","chooseAlgorithm","selectSpeed","containerWidth","createdNodes","xOffset","uniqueIdentifier","floor","random","tobreak","i","currentNode","setState","previous","container","offsetWidth","containerHeight","offsetHeight","generateNodes","inProgress","animationTime","speed","algorithm","setTimeout","res","newNodes","nidx","selectedAlgorithm","selectedSpeed","map","key","id","style","top","yCoordinate","left","xCoordinate","position","description","split","disabledState","meta","getMetaDataOfAlgorithm","Navbar","bg","variant","expand","Brand","href","alt","src","require","ButtonToolbar","Button","disabled","onClick","DropdownButton","title","onSelect","Dropdown","Item","eventKey","type","ref","el","renderContent","renderDescription","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cc40d8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport \"./node.css\";\n\nclass Node extends React.Component {\n    render() {\n        let classes = [\"circle\"];\n        if (this.props.node.isLeader) {\n            classes.push(\"leader\");\n        }\n        let nextMessage;\n        if(this.props.node.data > 0) {\n            nextMessage = <div className=\"box\">{this.props.node.data}</div>;\n        }\n\n        return (\n            <div>\n                <div className={classes.join(\" \")}>\n                    {this.props.node.uid}\n                </div>\n                {nextMessage}\n            </div>\n        );\n    }\n}\n\nexport default Node;\n","\n/**\n * @param radius : radius of the ring.\n * @param width : width of the container\n * @param height : height of the container\n * @param nodeWidth : width of a single node\n * @param numNodes : number of nodes to put on the ring\n * Finds the x and y coordinates of the nodes to put on the ring.\n */\nfunction distributeNodes(radius, width, height, nodeWidth, numNodes) {\n    let angle = 0, step = (2 * Math.PI) / numNodes, coordinates = [];\n    for (let index = 0; index < numNodes; index++) {\n        let x = Math.round(width / 2 + radius * Math.cos(angle) - nodeWidth / 2);\n        let y = Math.round(height / 2 + radius * Math.sin(angle) - nodeWidth / 2);\n        coordinates.push([x, y]);\n        angle += step;\n    }\n    return coordinates;\n}\n\nexport default distributeNodes;","/**\n * Runs the LCR algorithm to find the leader among the given nodes.\n * @param nodes the nodes with their uids. \n */\nfunction lcr(nodes) {\n    let len = nodes.length, results = [], selectedLeader, uidValues = [];\n    for (let index = 0; index < len; index++) {\n        uidValues.push(nodes[index].uid);        \n    }\n    results.push(uidValues);\n\n    let currentValues = uidValues;\n    for (let cnt = 1; cnt < len; cnt++) {\n        let resultValues = [], nextValues = [];\n        for(let idx = 0; idx < len; idx++) {\n            let prev = idx - 1;\n            if (prev < 0) {\n                prev = len - 1;\n            }\n            nextValues.push(Math.max(currentValues[idx], currentValues[prev]));\n            if(nextValues[idx] > currentValues[idx]) {\n                resultValues.push(nextValues[idx]);\n            } else {\n                resultValues.push(-1);\n            }\n        }\n        currentValues = nextValues;\n        results.push(resultValues);\n    }\n\n    // the element with maximum uid is the leader.\n    let maxuid = uidValues[0]; selectedLeader = 0;\n    for(let idx = 1; idx < len; idx++) {\n        if(uidValues[idx] > maxuid) {\n            maxuid = uidValues[idx];\n            selectedLeader = idx;\n        }\n    }\n\n    return {\n        path: results,\n        leader: selectedLeader\n    }\n}\n\n/**\n * Returns an object with the metadata of the LCR algorithm.\n */\nfunction getLCRMetaData() {\n    return {\n        \"title\": \"LCR Algorithm\",\n        \"description\": `Each process sends its UID around the ring.\n\nWhen a process receives a UID, it compares\nthis one to its own.\n\n– If the incoming UID is greater, then it\npasses this UID to the next process.\n– If the incoming UID is smaller, then it\ndiscards it.\n– If it is equal, then the process declares\nitself the leader.\n`,\n        \"time-complexity\": \"O(n)\",\n        \"message-complexity\": \"O(n^2) in worst case, O(nlogn) in average case\"\n    }\n}\n\nexport default lcr;\nexport {getLCRMetaData};","import React from 'react';\nimport \"./ring.css\";\nimport Node from \"../node/node.js\";\nimport distributeNodes from './utils';\nimport lcr from \"../../algorithms/lcr\";\nimport { Navbar, Button, ButtonToolbar, Dropdown, DropdownButton } from \"react-bootstrap\";\nimport {getLCRMetaData} from \"../../algorithms/lcr\";\n\nclass Ring extends React.Component {\n    static defaultState = {\n        \"nodes\": [],\n        \"inProgress\": false,\n        \"numNodes\": 5,\n        \"algorithm\": \"LCR\",\n        \"speed\": \"regular\"\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = Ring.defaultState;\n\n        // bind functions.\n        this.runAlgorithm = this.runAlgorithm.bind(this);\n        this.addNode = this.addNode.bind(this);\n        this.removeNode = this.removeNode.bind(this);\n        this.chooseAlgorithm = this.chooseAlgorithm.bind(this);\n        this.selectSpeed = this.selectSpeed.bind(this);\n    }\n\n    /**\n     * Generate the nodes to place on the canvas.\n     * @param containerWidth the width of the container. \n     */\n    generateNodes(containerWidth, numNodes) {\n        let createdNodes = [], coordinates = [];\n        const xOffset = Math.max(0, (containerWidth - 800)/ 2 - 50);\n        coordinates = distributeNodes(325, 800, 800, 10, numNodes);\n\n        for (let index = 0; index < numNodes; index++) {\n            let uniqueIdentifier;\n\n            // generate a unique identifier between 1 and 99.\n            while (true) {\n                uniqueIdentifier = Math.floor(Math.random() * 99 + 1);\n                let tobreak = true;\n\n                for (let i = 0; i < createdNodes.length; i++) {\n                    const element = createdNodes[i];\n                    if(element.uid === uniqueIdentifier) {\n                        tobreak = false;\n                        break;\n                    }\n                }\n\n                if (tobreak) {\n                    break;\n                }\n            }\n\n            let currentNode = {\n                \"id\": index + 1,\n                \"uid\": uniqueIdentifier,\n                \"isLeader\": false,\n                \"xCoordinate\": coordinates[index][0] + xOffset,\n                \"yCoordinate\": coordinates[index][1],\n                \"data\": null\n            }\n            createdNodes.push(currentNode);\n        }\n\n        return createdNodes;\n    }\n\n    // source: https://stackoverflow.com/a/49059117/6748052\n    componentDidMount() {\n        this.setState((previous) => ({\n            containerWidth: this.container.offsetWidth,\n            containerHeight: this.container.offsetHeight,\n            nodes: this.generateNodes(this.container.offsetWidth, previous.numNodes)\n        }));\n    }\n\n    /**\n     * Runs the currently set algorithms with the current nodes and other settings.\n     */\n    runAlgorithm() {\n        this.setState({\n            inProgress: true\n        });\n        let animationTime = 1000;\n        if(this.state.speed === \"slow\") {\n            animationTime = 2000;\n        } else if(this.state.speed === \"fast\") {\n            animationTime = 500;\n        }\n\n        if(this.state.algorithm === \"LCR\") {\n            let {path, leader} = lcr(this.state.nodes);\n            for(let idx = 0; idx < path.length; idx++) {\n                setTimeout(() => {\n                    const res = path[idx];\n                    let newNodes = this.state.nodes;\n                    for (let nidx = 0; nidx < newNodes.length; nidx++) {\n                        newNodes[nidx].data = res[nidx];\n                        if (idx === path.length - 1 && nidx === leader) {\n                            newNodes[nidx].isLeader = true;\n                        }\n                    }\n                    this.setState({\n                        node: newNodes\n                    });\n                }, animationTime * idx);\n            }\n        }\n        this.setState({ inProgress: false });\n    }\n\n    addNode() {\n        this.setState((previous) => ({\n            numNodes: previous.numNodes + 1,\n            nodes: this.generateNodes(this.container.offsetWidth, previous.numNodes + 1)\n        }));\n    }\n\n    removeNode() {\n        this.setState((previous) => ({\n            numNodes: previous.numNodes - 1,\n            nodes: this.generateNodes(this.container.offsetWidth, previous.numNodes - 1)\n        }));\n    }\n\n    chooseAlgorithm(selectedAlgorithm) {\n        this.setState({\n            algorithm: selectedAlgorithm\n        });\n    }\n\n    selectSpeed(selectedSpeed) {\n        this.setState({\n            speed: selectedSpeed\n        });\n    }\n\n    renderContent() {\n        return (\n            <div>\n                {this.state.nodes.map(node =>\n                    <div key={node.id} style={{ top: node.yCoordinate + \"px\", left: node.xCoordinate + \"px\", position: \"absolute\" }}>\n                        <Node node={node} />\n                    </div>)\n                }\n            </div>\n        );\n    }\n\n    getMetaDataOfAlgorithm() {\n        if(this.state.algorithm === \"LCR\") {\n            return getLCRMetaData();\n        }\n    }\n\n    renderDescription(description) {\n        return (\n            description.split(\"\\n\").map((i, key) => {\n                return <div key={key}>{i}</div>;\n            })\n        );\n    }\n\n    render() {\n        const { containerWidth } = this.state;\n        let disabledState = (this.state.inProgress) ? \"disabled\" : null;\n        let meta = this.getMetaDataOfAlgorithm();\n\n        return (\n            <div>\n                <div>\n                    <Navbar bg=\"dark\" variant=\"dark\" expand=\"xl\" className=\"justify-content-between\">\n                        <Navbar.Brand href=\"\">\n                            <img\n                                alt=\"\"\n                                src={require('./logo.svg')}\n                                width=\"30\"\n                                height=\"30\"\n                                className=\"d-inline-block align-top\"\n                            />\n                            {' Algorithm Visualizer'}\n                        </Navbar.Brand>\n                        &emsp; &emsp; &emsp; &emsp;\n                        <ButtonToolbar>\n                            <Button variant=\"secondary\" disabled={disabledState} onClick={this.addNode}>Add node</Button>\n                            &emsp;\n                            <Button variant=\"secondary\" disabled={disabledState} onClick={this.removeNode}>Remove node</Button>\n                            &emsp;\n                            <DropdownButton id=\"dropdown-basic-button\" title=\"Speed\" onSelect={this.selectSpeed} disabled={disabledState}>\n                                <Dropdown.Item eventKey=\"slow\">Slow</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"regular\">Regular</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"fast\">Fast</Dropdown.Item>\n                            </DropdownButton>\n                            &emsp;\n                            <DropdownButton id=\"dropdown-variants-secondary\" title=\"Algorithm\" onSelect={this.chooseAlgorithm} disabled={disabledState}>\n                                <Dropdown.Item eventKey=\"LCR\">LCR Algorithm</Dropdown.Item>\n                            </DropdownButton>\n                            &emsp;\n                            <Button variant=\"success\" type=\"submit\" onClick={this.runAlgorithm} disabled={disabledState}>Visualize</Button>\n                        </ButtonToolbar>\n                    </Navbar>\n                </div>\n\n                <div id=\"container\" ref={el => (this.container = el)}>\n                    {containerWidth && this.renderContent()}\n                </div>\n\n                <div id=\"description\" >\n                    {containerWidth && <h3>{meta.title}</h3>}\n                    {containerWidth && this.renderDescription(meta.description)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Ring;\n","import React from 'react';\nimport './App.css';\nimport Ring from \"./components/ring/ring.js\";\n\nfunction App() {\n  return (\n    <div>\n      <Ring />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}